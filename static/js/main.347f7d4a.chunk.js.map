{"version":3,"sources":["components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Form","state","name","number","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","this","className","id","htmlFor","type","onChange","placeholder","Component","ContactList","contacts","onDeleteContact","map","onClick","Filter","Notification","message","require","App","filter","addContact","isNameContacts","some","contact","toLowerCase","isNumberContacts","alert","trim","onChangeFilter","visibleContacts","normalizedFilter","includes","deleteContact","contactId","prevState","console","log","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.347f7d4a.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../Form/Form.css';\nimport shortid from 'shortid';\n\nclass Form extends Component {\n    state = {\n        name: '',\n        number: '',\n    };\n\n    nameInputId = shortid.generate();\n    numberInputId = shortid.generate();\n\n    handleChange = event => {\n        // console.log(event.currentTarget.value);\n        const { name, value } = event.currentTarget;\n\n        this.setState({\n            [name]: value,\n        });\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        // console.log(this.state);\n        this.props.onSubmit(this.state); // отправляем значения сабмита в пропс\n        this.setState({ name: '', number: '' }); //обнуляем форму\n    };\n\n    render() {\n        const { name, number } = this.state;\n        return (\n            <div>\n                <form\n                    className=\"form\"\n                    id=\"contact\"\n                    onSubmit={this.handleSubmit}\n                >\n                    <label className=\"label\" htmlFor={this.nameInputId}>\n                        Name\n                        <input\n                            className=\"input-field\"\n                            type=\"text\"\n                            name=\"name\"\n                            value={name}\n                            onChange={this.handleChange}\n                            id={this.nameInputId}\n                            placeholder=\"John Dows\"\n                        />\n                    </label>\n                    <br />\n                    <label htmlFor={this.numberInputId}>\n                        Phone number\n                        <input\n                            className=\"input-field\"\n                            type=\"text\"\n                            name=\"number\"\n                            value={number}\n                            onChange={this.handleChange}\n                            id={this.numberInputId}\n                            placeholder=\"459-12-56\"\n                        />\n                    </label>\n\n                    <button type=\"submit\" className=\"submit-button\">\n                        Add contact\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\nForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\nexport default Form;\n","import PropTypes from 'prop-types';\nimport '../ContactList/ContactList.css';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n    return (\n        <ul>\n            {contacts.map(({ id, name, number }) => (\n                <li className=\"contactItem\" key={id}>\n                    <p className=\"item\">\n                        {name} : {number}\n                    </p>\n                    <button\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => onDeleteContact(id)}\n                    >\n                        Delete\n                    </button>\n                </li>\n            ))}\n        </ul>\n    );\n}\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\nexport default ContactList;\n","import PropTypes from 'prop-types';\n\nexport default function Filter({ value, onChange }) {\n    return (\n        <label>\n            Find contacts by name\n            <input type=\"text\" value={value} onChange={onChange} />\n        </label>\n    );\n}\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport '../Notification/Notification.css';\n\nconst Notification = ({ message }) => {\n    return <p className=\"message\">{message}</p>;\n};\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import React, { Component } from 'react';\n\nimport Form from '../Form/Form';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport Notification from '../Notification/Notification';\nimport '../App/App.css';\nconst shortid = require('shortid');\n\nclass App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  //////////////////////////////////////////////////\n  componentDidMount() {\n    console.log('App componentDidMount ');\n\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  /////////////////////////////////////////////////////\n  componentDidUpdate(prevProps, prevState) {\n    console.log('App componentDidUpdate ');\n\n    if (this.state.contacts !== prevState.contacts) {\n      console.log('обновилось поле contacts, записываю contacts в хранилище');\n\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  /////////////////////////////////////////////////\n  addContact = ({ name, number }) => {\n    const isNameContacts = this.state.contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    const isNumberContacts = this.state.contacts.some(\n      contact => contact.number === number,\n    );\n\n    if (isNameContacts) {\n      alert(`${name} is already in contacts`);\n    } else if (name.trim() === '' || number.trim() === '') {\n      alert('You cannot add such a name and number');\n    } else if (isNumberContacts) {\n      alert(`${number} is alread in contacts`);\n    } else {\n      const contact = {\n        id: shortid.generate(),\n        name,\n        number,\n      };\n      //распыляет в массив\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    }\n  };\n\n  onChangeFilter = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  visibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  //удаление контактов\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  /////////////////////////////////////////////////\n  render() {\n    const visibleContacts = this.visibleContacts();\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Phonebook</h1>\n        <Form onSubmit={this.addContact} />\n\n        <h2 className=\"title\">Contacts</h2>\n        {visibleContacts.length > 0 ? (\n          <Filter value={this.state.filter} onChange={this.onChangeFilter} />\n        ) : (\n          <Notification message=\"You have no contacts !!\" />\n        )}\n        <ContactList\n          contacts={this.visibleContacts()}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}